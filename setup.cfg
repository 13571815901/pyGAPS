[bdist_wheel]
universal = 1

[aliases]
test=pytest

[bumpversion]
current_version = 1.2.0
commit = True
tag = False

[bumpversion:file:setup.py]
search = version='{current_version}'
replace = version='{new_version}'

[bumpversion:file:README.rst]
search = v{current_version}.
replace = v{new_version}.

[bumpversion:file:docs/conf.py]
search = version = release = '{current_version}'
replace = version = release = '{new_version}'

[bumpversion:file:src/pygaps/__init__.py]
search = __version__ = '{current_version}'
replace = __version__ = '{new_version}'


[flake8]
max-line-length = 140
exclude = */migrations/*


[isort]
force_single_line = True
line_length = 120
known_first_party = pygaps
default_section = THIRDPARTY
forced_separate = test_pygaps
not_skip = __init__.py
skip = migrations


[tool:pytest]
norecursedirs =
    .git
    .tox
    .env
    dist
    build
    migrations
python_files =
    test_*.py
    *_test.py
    tests.py
addopts =
    -ra
    #--strict
    --ignore=docs/conf.py
    --ignore=setup.py
    --ignore=ci
    --ignore=examples
    --ignore=.eggs
    --doctest-modules
    --doctest-glob=\*.rst
    --tb=short


[coverage]
show_missing = true
precision = 2
omit = *migrations*

[coverage:paths]
source =
    src/pygaps
    */site-packages/pygaps

[coverage:run]
branch = False
source =
    src
omit =
    */tests/*
parallel = true

[coverage:report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:


[matrix]
# This is the configuration for the `./bootstrap.py` script.
# It generates `.travis.yml`, `tox.ini` and `appveyor.yml`.
#
# Syntax: [alias:] value [!variable[glob]] [&variable[glob]]
#
# alias:
#  - is used to generate the tox environment
#  - it's optional
#  - if not present the alias will be computed from the `value`
# value:
#  - a value of "-" means empty
# !variable[glob]:
#  - exclude the combination of the current `value` with
#    any value matching the `glob` in `variable`
#  - can use as many you want
# &variable[glob]:
#  - only include the combination of the current `value`
#    when there's a value matching `glob` in `variable`
#  - can use as many you want

python_versions =
    3.5
    3.6
    # pypy

dependencies =
#    1.4: Django==1.4.16 !python_versions[3.*]
#    1.5: Django==1.5.11
#    1.6: Django==1.6.8
#    1.7: Django==1.7.1 !python_versions[2.6]
# Deps commented above are provided as examples. That's what you would use in a Django project.

coverage_flags =
    cover: true

environment_variables =
    -

